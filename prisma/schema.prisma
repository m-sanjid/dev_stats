// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String           @id @default(cuid())
  name               String?
  email              String?          @unique
  githubUsername     String?          @unique
  password           String?
  role               Role             @default(user)
  emailVerified      DateTime?
  image              String?
  subscription       SubscriptionType @default(free)
  stripeCustomerId   String?          @unique
  useWebhook         Boolean          @default(false)
  accounts           Account[]
  sessions           Session[]
  githubToken        GithubToken?
  repositories       Repository[]
  commits            GithubCommit[]
  webhooks           GitHubWebhook[]
  GitHubMetrics      GitHubMetrics?
  Portfolio          Portfolio?
  stripeSubscription Subscription?
  Payment            Payment[]
  githubOAuthState   String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//Github analytics
model GithubToken {
  id             String   @id @default(cuid())
  userId         String   @unique
  accessToken    String?
  githubUsername String?
  tokenType      String?
  scope          String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Repository {
  id              String         @id @default(cuid())
  name            String
  description     String?        @db.Text
  url             String?
  isPrivate       Boolean        @default(false)
  language        String?
  stars           Int            @default(0)
  forks           Int            @default(0)
  branches        Int            @default(0)
  defaultBranch   String         @default("main")
  lastPushed      DateTime?
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  commits         GithubCommit[]
  lastSynced      DateTime?
  webhookId       String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  GitHubMetrics   GitHubMetrics? @relation(fields: [gitHubMetricsId], references: [id])
  gitHubMetricsId String?
  topics          String[]       @default([])
  size            Int            @default(0)
  openIssues      Int            @default(0)
  watchers        Int            @default(0)
  license         String?
  visibility      String         @default("public")

  @@unique([userId, name])
  @@index([language])
  @@index([lastPushed])
  @@index([stars])
}

model GithubCommit {
  id            String       @id @default(cuid())
  sha           String
  author        String
  message       String
  timestamp     DateTime
  repositoryId  String
  repository    Repository   @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  User          User         @relation(fields: [userId], references: [id])
  userId        String
  files         CommitFIle[]
  estimatedTime Float
  createdAt     DateTime     @default(now())

  @@unique([sha, repositoryId])
  @@index([userId])
  @@index([timestamp])
}

model CommitFIle {
  id        String       @id @default(cuid())
  commitId  String
  commit    GithubCommit @relation(fields: [commitId], references: [id])
  filename  String
  additions Int
  deletions Int
  changes   Int
  status    String

  @@index([commitId])
}

//added webhook
model GitHubWebhook {
  id        String   @id @default(cuid())
  userId    String
  repoName  String
  webhookId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, repoName], name: "userId_repoName")
}

model GitHubMetrics {
  id               String       @id @default(cuid())
  userId           String       @unique
  totalCommits     Int          @default(0)
  totalLines       Int          @default(0)
  mergedPRs        Int          @default(0)
  repoStars        Int          @default(0)
  repositories     Repository[]
  weeklyCommits    Json         @default("{}")
  githubProfile    Json         @default("{}")
  languages        Json         @default("{}") // Store language statistics
  dailyActivity    Json         @default("{}") // Store daily coding activity
  contributedRepos Int          @default(0)
  totalPRs         Int          @default(0)
  totalIssues      Int          @default(0)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Portfolio {
  id        String   @id @default(cuid())
  userId    String   @unique
  bio       String?
  projects  Json
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionId    String   @unique // Stripe subscription ID
  status            String // Stripe subscription status
  currentPeriodEnd  DateTime
  cancelAtPeriodEnd Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([status])
  @@index([currentPeriodEnd])
}

model Payment {
  id              String         @id @default(cuid())
  userId          String
  paymentId       String         @unique
  amount          Int
  currency        String
  status          String
  description     String?
  paymentMethod   String?
  customerId      String?
  shippingName    String?
  shippingAddress Json?
  charge          PaymentCharge?
  createdAt       DateTime       @default(now())
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model PaymentCharge {
  id        String   @id @default(cuid())
  paymentId String   @unique
  chargeId  String   @unique
  status    String
  createdAt DateTime @default(now())
  payment   Payment  @relation(fields: [paymentId], references: [paymentId], onDelete: Cascade)

  @@index([status])
}

enum Role {
  user
  admin
}

enum SubscriptionType {
  free
  pro
}
