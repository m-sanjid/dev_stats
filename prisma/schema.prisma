// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  password      String?
  role          Role           @default(user)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  githubToken   GithubToken?
  repositories  Repository[]
  commits       GithubCommit[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//Github analytics
model GithubToken {
  id          String   @id @default(cuid())
  accessToken String   @db.Text
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId])
}

model Repository {
  id         String         @id @default(cuid())
  name       String
  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  commits    GithubCommit[]
  lastSynced DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([userId, name])
}

model GithubCommit {
  id            String       @id @default(cuid())
  sha           String
  author        String
  message       String
  timestamp     DateTime
  repositoryId  String
  repository    Repository   @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  User          User         @relation(fields: [userId], references: [id])
  userId        String
  files         CommitFIle[]
  estimatedTime Float
  createdAt     DateTime     @default(now())

  @@unique([sha, repositoryId])
  @@index([userId])
  @@index([timestamp])
}

model CommitFIle {
  id        String       @id @default(cuid())
  commitId  String
  commit    GithubCommit @relation(fields: [commitId], references: [id])
  filename  String
  additions Int
  deletions Int
  changes   Int
  status    String

  @@index([commitId])
}

enum Role {
  user
  admin
}
